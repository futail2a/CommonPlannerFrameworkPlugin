/******
 * @author Yuki Suga, Tao Asato
 * @copyright Ogata-lab 2016
 * @lisence public domain
 *****/

#ifndef TrajectoryPlanner_idl
#define TrajectoryPlanner_idl

#include "BasicDataType.idl"
#include "ExtendedDataTypes.idl"
#include "InterfaceDataTypes.idl"

module Manipulation {

  struct ObjectIdentifier {
    string name;
  };
  
  struct ObjectInfo {
    ObjectIdentifier objectID;
    RTC::Pose3D pose;
  };
  
  struct JointAngle {
    double data;
  };

  typedef sequence<JointAngle> JointAngleSeq;

  struct DHParameter {
    double alpha;
    double theta;
    double a;
    double d;
  };

  struct LimitValue {
    double upper;
    double lower;
  };
  
  struct JointParameter {
    string name;
    DHParameter dHParam;
    LimitValue limit;
  };

  struct RobotJointInfo {
    sequence<JointParameter> jointParameterSeq;
  };
  
  struct RobotIdentifier {
    string name;
  };
  
  struct ManipulationPlan {
    RobotIdentifier robotID;
    sequence<JointAngleSeq> manipPath;
  };

  struct CollisionPair {
    string name0;
    string name1;
  };

  typedef sequence<CollisionPair> CollisionPairSeq;
  
  struct MeshInfo {
    string name;
  };

  enum RETURN_ID {
    OK,
    MODEL_NOT_FOUND,
    INVALID_SETTING,
    INVALID_ARGUMENT,
    ERROR_UNKNOWN
  };
  
  struct ReturnValue {
    RETURN_ID id;
    string message;
  };

  struct EndEffectorPose {
    RTC::Pose3D pose;
  };
  
  struct HGMatrix {
     double value[3][4];
  };
  
  interface ObjectDetectionService {
    ReturnValue detectObject(in ObjectIdentifier objectID, out ObjectInfo objInfo);
    ReturnValue setBaseFrame(in HGMatrix frame);
  };

  interface ObjectHandleStrategyService {
    ReturnValue getApproachOrientation(in ObjectInfo objInfo, out EndEffectorPose eePos);
  };

  interface KinematicSolverService {
    ReturnValue solveKinematics(in EndEffectorPose targetPose, out JointAngleSeq targetJointAngles);
  };
  
  /** This might be unused.
  interface CurrentStateService {
    ReturnValue getCurrentState(out RobotJointInfo robotJoint);
  };
  */
  
  interface CollisionDetectionService {
    ReturnValue isCollide(in RobotIdentifier robotID, in JointAngleSeq jointAngles, out CollisionPairSeq collisions);
  };
  
  interface ManipulationPlannerService {
    ReturnValue planManipulation(in RobotJointInfo jointsInfo, in JointAngleSeq startJointAngles, in JointAngleSeq goalJointAngles, out ManipulationPlan manipPlan);
  };
  
  interface ModelServerService {
    ReturnValue getModelInfo(in RobotIdentifier robotID, out RobotJointInfo jointsInfo);
    ReturnValue getMeshInfo(in RobotIdentifier robotID, out MeshInfo mesh);
  };
  
  interface MotionGeneratorService {
    ReturnValue followManipPlan(in ManipulationPlan manipPlan);
    ReturnValue getCurrentRobotJointAngles(out JointAngleSeq jointAngles);
  };
  
};

#endif
